From 16d220c2db100c8811e1e18740eb133c839eb91c Mon Sep 17 00:00:00 2001
From: Nicholas Sim <nicholassimws@gmail.com>
Date: Tue, 15 Jan 2019 17:50:45 +0000
Subject: [PATCH 12/22] preliminary support for 128-bit wide pointers

---
 src/liballoc/collections/vec_deque.rs  | 2 +-
 src/libcore/num/mod.rs                 | 6 +++---
 src/libcore/num/wrapping.rs            | 6 ++++++
 src/libcore/sync/atomic.rs             | 5 +++++
 src/librustc/mir/interpret/pointer.rs  | 4 +++-
 src/librustc/session/config.rs         | 1 +
 src/librustc_codegen_llvm/allocator.rs | 1 +
 src/librustc_codegen_llvm/llvm/ffi.rs  | 1 +
 src/librustc_mir/interpret/validity.rs | 3 ++-
 src/librustc_target/abi/mod.rs         | 2 ++
 10 files changed, 25 insertions(+), 6 deletions(-)

diff --git a/src/liballoc/collections/vec_deque.rs b/src/liballoc/collections/vec_deque.rs
index 4e90f783ec..89fd875ae1 100644
--- a/src/liballoc/collections/vec_deque.rs
+++ b/src/liballoc/collections/vec_deque.rs
@@ -27,7 +27,7 @@ const MINIMUM_CAPACITY: usize = 1; // 2 - 1
 const MAXIMUM_ZST_CAPACITY: usize = 1 << (16 - 1); // Largest possible power of two
 #[cfg(target_pointer_width = "32")]
 const MAXIMUM_ZST_CAPACITY: usize = 1 << (32 - 1); // Largest possible power of two
-#[cfg(target_pointer_width = "64")]
+#[cfg(any(target_pointer_width = "64", target_pointer_width = "128"))]
 const MAXIMUM_ZST_CAPACITY: usize = 1 << (64 - 1); // Largest possible power of two
 
 /// A double-ended queue implemented with a growable ring buffer.
diff --git a/src/libcore/num/mod.rs b/src/libcore/num/mod.rs
index d93cfbc2a2..492366bab3 100644
--- a/src/libcore/num/mod.rs
+++ b/src/libcore/num/mod.rs
@@ -2090,7 +2090,7 @@ impl isize {
         "[0x12, 0x34, 0x56, 0x78]" }
 }
 
-#[cfg(target_pointer_width = "64")]
+#[cfg(any(target_pointer_width = "64", target_pointer_width = "128"))]
 #[lang = "isize"]
 impl isize {
     int_impl! { isize, i64, u64, 64, -9223372036854775808, 9223372036854775807, "", "",
@@ -4323,7 +4323,7 @@ impl usize {
         "0x78563412", "0x1e6a2c48", "[0x78, 0x56, 0x34, 0x12]", "[0x12, 0x34, 0x56, 0x78]" }
 }
 
-#[cfg(target_pointer_width = "64")]
+#[cfg(any(target_pointer_width = "64", target_pointer_width = "128"))]
 #[lang = "usize"]
 impl usize {
     uint_impl! { usize, u64, 64, 18446744073709551615, "", "", 12, "0xaa00000000006e1", "0x6e10aa",
@@ -4609,7 +4609,7 @@ mod ptr_try_from_impls {
     rev!(try_from_both_bounded, isize, i64, i128);
 }
 
-#[cfg(target_pointer_width = "64")]
+#[cfg(any(target_pointer_width = "64", target_pointer_width = "128"))]
 mod ptr_try_from_impls {
     use super::TryFromIntError;
     use convert::TryFrom;
diff --git a/src/libcore/num/wrapping.rs b/src/libcore/num/wrapping.rs
index 9cd5108ade..df4b799b6e 100644
--- a/src/libcore/num/wrapping.rs
+++ b/src/libcore/num/wrapping.rs
@@ -906,6 +906,12 @@ mod shift_max {
         pub const isize: u32 = super::i64;
     }
 
+    #[cfg(target_pointer_width = "128")]
+    mod platform {
+        pub const usize: u32 = super::u128;
+        pub const isize: u32 = super::i128;
+    }
+
     pub const i8: u32 = (1 << 3) - 1;
     pub const i16: u32 = (1 << 4) - 1;
     pub const i32: u32 = (1 << 5) - 1;
diff --git a/src/libcore/sync/atomic.rs b/src/libcore/sync/atomic.rs
index 04a49d2530..e88fd293b9 100644
--- a/src/libcore/sync/atomic.rs
+++ b/src/libcore/sync/atomic.rs
@@ -173,6 +173,7 @@ unsafe impl Sync for AtomicBool {}
 #[cfg_attr(target_pointer_width = "16", repr(C, align(2)))]
 #[cfg_attr(target_pointer_width = "32", repr(C, align(4)))]
 #[cfg_attr(target_pointer_width = "64", repr(C, align(8)))]
+#[cfg_attr(target_pointer_width = "128", repr(C, align(16)))]
 pub struct AtomicPtr<T> {
     p: UnsafeCell<*mut T>,
 }
@@ -2048,6 +2049,10 @@ macro_rules! ptr_width {
 macro_rules! ptr_width {
     () => { 8 }
 }
+#[cfg(target_pointer_width = "128")]
+macro_rules! ptr_width {
+    () => { 16 }
+}
 #[cfg(target_has_atomic = "ptr")]
 atomic_int!{
     stable(feature = "rust1", since = "1.0.0"),
diff --git a/src/librustc/mir/interpret/pointer.rs b/src/librustc/mir/interpret/pointer.rs
index 9216cb494c..b444f69900 100644
--- a/src/librustc/mir/interpret/pointer.rs
+++ b/src/librustc/mir/interpret/pointer.rs
@@ -21,7 +21,9 @@ pub trait PointerArithmetic: layout::HasDataLayout {
     //// Trunace the given value to the pointer size; also return whether there was an overflow
     #[inline]
     fn truncate_to_ptr(&self, val: u128) -> (u64, bool) {
-        let max_ptr_plus_1 = 1u128 << self.pointer_size().bits();
+        let mut bits = self.pointer_size().bits();
+        if bits > 64 { bits = 64; }
+        let max_ptr_plus_1 = 1u128 << bits;
         ((val % max_ptr_plus_1) as u64, val >= max_ptr_plus_1)
     }
 
diff --git a/src/librustc/session/config.rs b/src/librustc/session/config.rs
index cf9bafe246..b13ea940fa 100644
--- a/src/librustc/session/config.rs
+++ b/src/librustc/session/config.rs
@@ -1543,6 +1543,7 @@ pub fn build_target_config(opts: &Options, sp: &Handler) -> Config {
         "16" => (ast::IntTy::I16, ast::UintTy::U16),
         "32" => (ast::IntTy::I32, ast::UintTy::U32),
         "64" => (ast::IntTy::I64, ast::UintTy::U64),
+        "128" => (ast::IntTy::I128, ast::UintTy::U128),
         w => sp.fatal(&format!(
             "target specification was invalid: \
              unrecognized target-pointer-width {}",
diff --git a/src/librustc_codegen_llvm/allocator.rs b/src/librustc_codegen_llvm/allocator.rs
index decc874363..fdfb358034 100644
--- a/src/librustc_codegen_llvm/allocator.rs
+++ b/src/librustc_codegen_llvm/allocator.rs
@@ -16,6 +16,7 @@ pub(crate) unsafe fn codegen(tcx: TyCtxt<'_, '_, '_>, mods: &mut ModuleLlvm, kin
         "16" => llvm::LLVMInt16TypeInContext(llcx),
         "32" => llvm::LLVMInt32TypeInContext(llcx),
         "64" => llvm::LLVMInt64TypeInContext(llcx),
+        "128" => llvm::LLVMInt128TypeInContext(llcx),
         tws => bug!("Unsupported target word size for int: {}", tws),
     };
     let i8 = llvm::LLVMInt8TypeInContext(llcx);
diff --git a/src/librustc_codegen_llvm/llvm/ffi.rs b/src/librustc_codegen_llvm/llvm/ffi.rs
index 8b8e0c9470..45dc3dc0e5 100644
--- a/src/librustc_codegen_llvm/llvm/ffi.rs
+++ b/src/librustc_codegen_llvm/llvm/ffi.rs
@@ -659,6 +659,7 @@ extern "C" {
     pub fn LLVMInt16TypeInContext(C: &Context) -> &Type;
     pub fn LLVMInt32TypeInContext(C: &Context) -> &Type;
     pub fn LLVMInt64TypeInContext(C: &Context) -> &Type;
+    pub fn LLVMInt128TypeInContext(C: &Context) -> &Type;
     pub fn LLVMIntTypeInContext(C: &Context, NumBits: c_uint) -> &Type;
 
     pub fn LLVMGetIntTypeWidth(IntegerTy: &Type) -> c_uint;
diff --git a/src/librustc_mir/interpret/validity.rs b/src/librustc_mir/interpret/validity.rs
index 252e8bac2a..9e067345c8 100644
--- a/src/librustc_mir/interpret/validity.rs
+++ b/src/librustc_mir/interpret/validity.rs
@@ -444,7 +444,8 @@ impl<'rt, 'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>>
         let max_hi = u128::max_value() >> (128 - op.layout.size.bits());
         assert!(hi <= max_hi);
         // We could also write `(hi + 1) % (max_hi + 1) == lo` but `max_hi + 1` overflows for `u128`
-        if (lo == 0 && hi == max_hi) || (hi + 1 == lo) {
+        // hi + 1 overflows if hi == u128_max (e.g. 128-bit ptr)
+        if (lo == 0 && hi == max_hi) || (hi == u128::max_value()) || (hi + 1 == lo) {
             // Nothing to check
             return Ok(());
         }
diff --git a/src/librustc_target/abi/mod.rs b/src/librustc_target/abi/mod.rs
index 37ef295ccb..d9f04fc87b 100644
--- a/src/librustc_target/abi/mod.rs
+++ b/src/librustc_target/abi/mod.rs
@@ -190,6 +190,7 @@ impl TargetDataLayout {
             16 => 1 << 15,
             32 => 1 << 31,
             64 => 1 << 47,
+            128 => 1 << 47,
             bits => panic!("obj_size_bound: unknown pointer bit size {}", bits)
         }
     }
@@ -199,6 +200,7 @@ impl TargetDataLayout {
             16 => I16,
             32 => I32,
             64 => I64,
+            128 => I128,
             bits => panic!("ptr_sized_integer: unknown pointer bit size {}", bits)
         }
     }
-- 
2.14.1

